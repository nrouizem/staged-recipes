{% set name = "openmm-dlext" %}
{% set version = "0.1.0" %}


package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://github.com/SSAGESLabs/openmm-dlext/archive/refs/tags/v{{ version }}.tar.gz
  sha256: 3eac6db80df97f4ee970090ae60ab38f6f368964c9cc4708e0c82d38f7868dbb

build:
  number: 1
  string: cuda{{ cuda_compiler_version | replace('.', '') }}py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version != "None"]
  string: cpu_py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}                                      # [cuda_compiler_version == "None"]
  skip: true  # [win or (linux and cuda_compiler_version in (undefined, 'None', '10.2'))]
  rpaths:
    - lib/

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ compiler('cuda') }}  # [cuda_compiler_version not in (undefined, 'None')]
    - cmake
    - make
  host:
    - python
    - pip
    - swig
    - openmm
  run:
    - python
    - {{ pin_compatible('openmm', max_pin='x.x') }}
  
test:
  imports:
    - openmm_dlext
  
about:
  home: https://github.com/SSAGESLabs/openmm-dlext
  license: MIT
  license_family: MIT
  license_file: README.md
  summary: Plugin for OpenMM providing simulation data wrappers as DLPack data structures
  description: |
    The plugin is intended to provide a OpenMM::Force derived class that does no direct computation,
    but instead uses DLPack wrappers around CPU or GPU OpenMM::Platform data for an initialized
    instance of OpenMM::Contex, and a callback interface to perform computations on such data
    outside the plugin.
  doc_url: https://github.com/SSAGESLabs/openmm-dlext
  dev_url: https://github.com/SSAGESLabs/openmm-dlext

extra:
  recipe-maintainers:
    - pabloferz
    - nrouizem